---
#- name: my debug
#  debug:
#     msg: "{{ item }}"
#  ##loop: "{{ query('dict',dockerContainerList) }}"
#  loop: "{{ mylist2 | map(attribute='name') | list | difference(['bridge','none','host']) }}"
#  ##when: dockerContainerList[0] and item.enabled and item.networks is defined
#  vars: 
#    ##mylist: "{{ dockerContainerList |  items2dict(key_name='name', value_name='networks') }}"
#    mylist2: "{{ dockerContainerList | map(attribute='networks') | list | flatten | unique }}"
#    ##loop: "{{ ['networks'] | map('extract' , mylist ) | list }}"
#  tags: my_debug

- name: Preliminary scripts to run before start a container
  shell: "{{ item.path }}/{{ item.name }}"
  args:
    chdir: "{{ item.path }}"
    creates: "{{ item.creates }}"
    warn: false
  loop: "{{ docker_preconfig }}"
  when: docker_preconfig is defined and item.run_shell is defined and item.run_shell
  register: shell_backup_done
  tags: config_files, deploy_templates, upload_files

- name: Log into DockerHub to push images -----------------
  docker_login:
     username: "{{ docker_username }}"
     password: "{{ docker_password }}"
  when: docker_username is defined and docker_password is defined
  register: docker_logged_in
  tags: docker

#- name: My debug
#  debug:
#     msg: "{{ item }}"
#  loop: "{{ myHashNetList | map(attribute='name') | list | difference(['bridge','none', 'host']) }}"
#  vars: 
#    my_query: "[?enabled].networks"
#    myHashNetList: "{{ dockerContainerList | json_query(my_query) | list | flatten | unique }}"
#  when: dockerContainerList is defined
#  tags: docker, docker_networks, debug

- name: Docker network deployment -------------------------
  docker_network:
     name: "{{ item }}"
  loop: "{{ myHashNetList | map(attribute='name') | list | difference(['bridge','none','host']) }}"
  vars: 
    my_query: "[?enabled].networks"
    myHashNetList: "{{ dockerContainerList | json_query(my_query) | list | flatten | unique }}"
  when: dockerContainerList is defined
  register: docker_networks_created
  tags: docker, docker_networks

          
- name: Docker container deployment -----------------------
  docker_container:
     name: "{{ item.name }}"
     image: "{{ item.image }}"
     pull: "{{ item.pull | default(omit) }}"
     networks: "{{ item.networks | default(omit) }}"
     links: "{{ item.links | default(omit) }}"
     volumes: "{{ item.volumes | default(omit) }}"
     volumes_from: "{{ item.volumes_from | default(omit) }}"
     working_dir: "{{ item.working_dir | default(omit) }}"
     user: "{{ item.user | default(omit) }}"
     published_ports: "{{ item.published_ports | default(omit) }}"
     purge_networks: "{{ item.purge_networks | default(omit) }}"
     state: "{{ item.state | default('started') }}"
     networks_cli_compatible: true
     env: "{{ item.env | default(omit) }}"
     hostname: "{{ item.hostname | default(omit) }}"
     command: "{{ item.command | default(omit) }}"
     restart_policy: "{{ item.restart_policy | default(omit) }}"
  loop: "{{ dockerContainerList }}"
  when: dockerContainerList is defined and item.enabled and docker_networks_created is success
  register: container_created
  tags: docker, docker_container

