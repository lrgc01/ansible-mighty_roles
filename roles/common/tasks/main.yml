---
#- name: Apt repositories for certbot ----------------------
#  apt_repository:
#    repo: ppa:certbot/certbot
#  register: certbot_repo_added
#  tags: update_repository
#
- name: Install remote python if not installed (apt)-------
  raw: "if [ ! -f /usr/bin/python3 ] ; then apt install -y python3 ; fi "
  when: bootstrap_os is defined and bootstrap_os == "Debian"
  tags: bootstrap_python

- name: Install remote python if not installed (yum)-------
  raw: "if [ ! -f /usr/bin/python3 ] ; then yum install -y python3 ; fi "
  when: bootstrap_os is defined and (bootstrap_os == "CentOS" or bootstrap_os == "RedHat")
        and ansible_python_interpreter is match(".*python3$") 
  tags: bootstrap_python

- name: Install remote python2 if not installed (yum)-------
  raw: "if [ ! -f /usr/bin/python2 ] ; then yum install -y python ; fi "
  when: bootstrap_os is defined and (bootstrap_os == "CentOS" or bootstrap_os == "RedHat")
        and ansible_python_interpreter is match(".*python2$") 
  tags: bootstrap_python

- name: Dependency install -- dnf on CentOS 7 -------------
  raw: "if [ ! -f /usr/bin/dnf ] ; then yum install -y epel-release dnf ; fi "
  when: bootstrap_os is defined and (bootstrap_os == "CentOS")
        and ansible_python_interpreter is match(".*python3$") 
  tags: bootstrap_python

# Some dependencies modules should be done early - eg. PIP before PIP module
- name: Install early python dependencies for Centos7 via pip
  pip:
    name: "dnf"
  when: ansible_distribution is defined and ansible_distribution == "CentOS"
        and pip_install_list is defined and ansible_python_version is match("^3.*")
  tags: python_pip_modules

- name: Dependency install -- python-pip (Debian/Ubuntu) --
  apt: 
    pkg: "python-pip"
    state: "present"
  when: ansible_distribution is defined and ( ansible_distribution == "Debian"
        or ansible_distribution == "Ubuntu" )
        and pip_install_list is defined and ansible_python_version is match("^2.*") 
  register: pip_installed
  tags: python_pip_modules

- name: Dependency install -- python3-pip (Debian/Ubuntu) -
  apt:
    pkg: "python3-pip"
    state: "present"
  when: ansible_distribution is defined and ( ansible_distribution == "Debian"
        or ansible_distribution == "Ubuntu" )
        and pip_install_list is defined and ansible_python_version is match("^3.*")
  register: pip3_installed
  tags: python_pip_modules

- name: Dependency install -- python-pip (CentOS/RedHat) --
  yum: 
    pkg: "python-pip"
    state: "present"
  when: ansible_distribution is defined and (ansible_distribution == "CentOS" or ansible_distribution == "RedHat")
        and pip_install_list is defined and ansible_python_version is match("^2.*") 
  register: pip_installed
  tags: python_pip_modules

- name: Dependency install -- python3-pip (CentOS/RedHat) -
  dnf:
    pkg: "python3-pip"
    state: "present"
  when: ansible_distribution is defined and (ansible_distribution == "CentOS" or ansible_distribution == "RedHat")
        and pip_install_list is defined and ansible_python_version is match("^3.*")
  register: pip3_installed
  tags: python_pip_modules

- name: Install requisite packages to run apt_key ---------
  apt:
    pkg: "{{ item }}"
    state: "present"
  loop: "{{ apt_key_req_packs }}"
  when: ansible_distribution is defined and ( ansible_distribution == "Debian"
        or ansible_distribution == "Ubuntu" )
        and apt_key_req_packs is defined and listAptRepos is defined 
  register: req_to_apt_key_installed
  tags: update_repository, apt_keys

- name: Apt keys - add a repository key -------------------
  apt_key:
    url: "{{ item.keyUrl }}"
    state: "{{ item.state }}"
  loop: "{{ listAptRepos }}"
  when: ansible_distribution is defined and ( ansible_distribution == "Debian"
        or ansible_distribution == "Ubuntu" )
        and listAptRepos is defined and item.state is defined 
        and item.keyUrl is defined and req_to_apt_key_installed is success
  register: apt_keys_done
  tags: update_repository, apt_keys

- name: Apt database - add new repo to repository listing -
  apt_repository:
    repo: "{{ item.repoStr }}"
    state: "{{ item.state }}"
  loop: "{{ listAptRepos }}"
  when: ansible_distribution is defined and ( ansible_distribution == "Debian"
        or ansible_distribution == "Ubuntu" )
        and listAptRepos is defined and item.state is defined and item.repoStr is defined
  register: apt_repos_done
  tags: update_repository

- name: yum database - add new repo -------------------
  yum_repository:
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    baseurl: "{{ item.baseurl | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    enabled: "{{ item.enabled | default('yes') }}"
    gpgcakey: "{{ item.gpgcakey | default(omit) }}"
    gpgcheck: "{{ item.gpgcheck | default(omit) }}"
  loop: "{{ yum_repo_list }}"
  when: ansible_distribution is defined and (ansible_distribution == "CentOS" or ansible_distribution == "RedHat")
        and yum_repo_list is defined and item.name is defined and item.description is defined
  register: yum_repos_done
  tags: update_repository, yum_repo

- name: Update cache and upgrade (may take a time) --------
  apt: 
    update_cache: "yes"
    upgrade: "{{ update_cache_y_n | default(true) }}"
  when: ansible_distribution is defined and ( ansible_distribution == "Debian"
        or ansible_distribution == "Ubuntu" )
        and apt_repos_done is changed
  register: updated_cache
  tags: update_repository

- name: Update cache (yum) (may take a time) --------------
  yum: 
    update_cache: "yes"
    #upgrade: "{{ update_cache_y_n | default(true) }}"
  when: ansible_distribution is defined and (ansible_distribution == "CentOS" or ansible_distribution == "RedHat")
        and ansible_python_interpreter is match(".*python2$") 
  register: updated_cache
  tags: update_repository, yum_repo

- name: Update cache (dnf) (may take a time) --------------
  dnf: 
    update_cache: "yes"
    #upgrade: "{{ update_cache_y_n | default(true) }}"
  when: ansible_distribution is defined and (ansible_distribution == "CentOS" or ansible_distribution == "RedHat")
        and ansible_python_interpreter is match(".*python3$") 
  register: updated_cache
  tags: update_repository, yum_repo

- name: Install local python dependencies via pip ---------
  pip:
    name: "{{ item }}"
  loop: "{{ pip_install_list }}"
  when: pip_install_list is defined and (pip_installed is success or pip3_installed is success)
  tags: python_pip_modules

- name: Install very basic packages to run ansible --------
  apt:
    pkg: "{{ item.pkg }}"
    state: "present"
  loop: "{{ base_dep_pkg_list }}"
  when: ansible_distribution is defined and ( ansible_distribution == "Debian"
        or ansible_distribution == "Ubuntu" )
        and base_dep_pkg_list is defined
  register: base_dep_pkg_installed
  tags: install_base_pkg
