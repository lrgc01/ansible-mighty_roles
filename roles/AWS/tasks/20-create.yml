---
########################################################
# Security groups and key pairs - almost aways mandatory
- name: Create/Modify/Delete sec groups ---
  ec2_group:
    aws_access_key: "{{ aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_secret_key | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    region: "{{ region }}"
    name: "{{ item.name }}"
    description: "{{ item.description | default(omit) }}"
    vpc_id: "{{ item.vpc_id | default(vpc_facts.vpcs[0].vpc_id) }}"
    rules: "{{ item.rules }}"
  loop: "{{ securityGroupList }}"
  register: created_sg
  when: vpc_facts is success and securityGroupList is defined
  tags: create_security_groups, change_state_all_ec2_instances, change_state_all_instances, create_ec2_instances, create_rds_instances, create_aws_instances

- name: Create EC2 key pairs --------------
  ec2_key:
    aws_access_key: "{{ aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_secret_key | default(omit) }}"
    region: "{{ region }}"
    name: "{{ item.name }}"
    state: "{{ item.state | default(omit) }}"
  loop: "{{ keyPairList }}"
  when: keyPairList is defined
  notify: Copy EC2 Private Key
  register: keypair_registered
  tags: create_key_pairs, create_rds_instances, create_ec2_instances, create_aws_instances

#############################
# EC2 instances ('wait' = 'yes' to its completion)
- name: Create/Modify/Destroy EC2 instances
  ec2_instance:
    aws_access_key: "{{ aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_secret_key | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
    wait: "{{ item.wait | default ('yes') }}"
    region: "{{ region }}"
    tags: "{{ item.tags | default(omit) }}"
    image_id: "{{ item.image }}"
    security_groups: "{{ item.SG_name }}"
    instance_type: "{{ item.type | default(omit) }}"
    key_name: "{{ item.key_name }}"
    vpc_subnet_id: "{{ item.subnet_id | default(pick_subnet[0]) }}"
    network: 
       assign_public_ip: "{{ item.pub_ip | default(true) }}"
    termination_protection: "{{ item.term_prot | default(omit) }}"
  loop: "{{ ec2Instances }}"
  when: ec2Instances is defined and default_subnets is success 
  vars:
    pick_subnet: "{{ default_subnets.subnets|map(attribute='id') | list | shuffle(seed=ansible_hostname) }}"
  register: create_ec2_instances
  tags: create_ec2_instances, create_aws_instances

#############################
# RDS instances ('wait' = 'yes' to its completion)
- name: Create/Modify/Delete RDS instances
  rds_instance:
    aws_access_key: "{{ aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_secret_key | default(omit) }}"
    region: "{{ region }}"
    state: "{{ item.command }}"
    publicly_accessible: "{{ item.pub_access | default(omit) }}"
    instance_type: "{{ item.type }}"
    db_name: "{{ item.db_name }}"
    db_instance_identifier: "{{ item.db_name }}"
    engine: "{{ item.engine }}"
    allocated_storage: "{{ item.storage | default(omit) }}"
    vpc_security_group_ids: "{{ created_sg | json_query(sg_id) }}"
    username: "{{ item.username }}"
    password: "{{ item.password }}"
    tags: "{{ item.tags }}"
    wait: "{{ item.wait | default(true) }}"
    skip_final_snapshot: "{{ item.skip_final_snapshot | default(omit) }}"
    final_db_snapshot_identifier: "{{ item.final_db_snapshot_identifier | default(omit) }}"
  loop: "{{ rdsInstancesByName }}"
  when: rdsInstancesByName is defined and created_sg is success
  vars:
     sg_id: "results[?group_name=='{{ item.sg_name }}'].group_id"
  register: created_db_instance
  tags: create_rds_instances, create_aws_instances

##############################
# EFS file system (to export via NFS)
- name: Create EFS file systems -----------
  efs:
    aws_access_key: "{{ aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_secret_key | default(omit) }}"
    region: "{{ region }}"
    state: "{{ item.state | default(omit) }}"
    name: "{{ item.name }}"
    targets: "{{ item.targets | default(local_targets) }}"
    tags: "{{ item.tags }}"
  loop: "{{ efsInstances }}"
  when: efsInstances is defined and default_subnets is success
  vars:
    local_targets: "{{ default_subnets | json_query('subnets[*].{subnet_id: subnet_id}') }}"
  register: efs_instance_created
  tags: create_efs_instances, create_aws_instances

#############################################
# CloudFront configs (CFN) - still work to do
- name: Gather CFN instances facts --------
  cloudfront_facts:
    aws_access_key: "{{ aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_secret_key | default(omit) }}"
    all_lists: "yes"
  register: cfn_facts
  tags: gather_cfn, change_state_all_instances, create_cfn_instances, create_aws_instances

- name: Create CloudFront distribution ----
  cloudfront_distribution:
    aws_access_key: "{{ aws_access_key | default(omit) }}"
    aws_secret_key: "{{ aws_secret_key | default(omit) }}"
    region: "{{ region }}"
    state: "{{ cloudfrontInstances[0].state }}"
    default_origin_domain_name: "{{ cloudfrontInstances[0].domainname }}"
    enabled: "{{ cloudfrontInstances[0].enabled }}"
    tags: "{{ cloudfrontInstances[0].tags | default(omit) }}"
  #loop: "{{ cloudfrontInstances }}"
  #when: cloudfrontInstances[0] and default_subnets is success
  # When variables are defined and facts returned no list
  when: cloudfrontInstances is defined and cloudfrontInstances[0].enabled and not (cfn_facts.ansible_facts.cloudfront.summary.distributions[0] is defined)
  register: cloudfront_instance_created
  tags: create_cfn_instances, create_aws_instances

#######
# debug
#- name: Show debug
#  debug:
#    msg: "{{ default_subnets | json_query(query_by_name) }}"
#  #loop: "{{ created_sg | json_query('results[?group_name==`rdp`].group_id') }}"
#  #loop: "{{ created_sg | json_query(query_by_name) }}"
#  #loop: "{{ keypair_registered | json_query('results[*].key') }}"
#  #loop: "{{ keypair_registered | json_query(query_by_name) }}"
#  loop: "{{ keypair_registered.results }}"
#  when: item.key.private_key is defined
#  vars:
#    sg_id: "results[?group_name=='{{ rdsInstancesByName[0].sg_name }}'].group_id"
#    #query_by_name: "results[?group_name=='{{ winSgName }}'].group_id"
#    #query_by_name: "results[?key.name=='test-key'].key"
#    query_by_name: "subnets[*].{subnet_id: subnet_id}"
#    #query_by_name: "results[?key.private_key!=''].key"
#  tags: show_debug
