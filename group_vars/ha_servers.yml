---
##############################################
#
# Python role block variable definition
#
# boto* is for AWS so use in localhost only
pip_install_list        : [ "botocore" , "boto" , "boto3" ]
#pip_install_list        : [ false ]

#--- End of python role block

##############################################
#
# General var definition block - to all roles
#
# Our web server definitions
#
sys_username            : "azureuser"
my_workdir              : "~{{ sys_username }}"
www_basedir             : "/var/www"
www_htmldir             : "{{ www_basedir }}/html"
www_username            : "www-data"
domain1_rootdir         : "{{ www_htmldir }}"
web_service             : "nginx"
#
# haproxy
web_proxy               : "haproxy"
web_service_other       : "{{ web_proxy }}"
be_srv_1                : "10.0.0.5"
be_srv_2                : "10.0.0.6"

#
# Will be used mainly with SSL certificate role
#
key_base_path           : "/etc/ssl/private"
cert_base_path          : "/etc/ssl/certs"
domain1                 : "lrc.sytes.net"
cert_name_prefix        : "stg-letsencrypt"
account_key             : "stg-letsencrypt-account-key.key"
##cert_name_prefix        : "pro-{{ domain1 }}"
##account_key             : "pro-letsencrypt-account-key.key"
#


# These below are used with remote ansible python script and once installed it's better not remove them
base_dep_pkg_list:
   - { pkg : "python-mysqldb"  }
   - { pkg : "python-openssl"  }

#--- End of General vars block

##############################################
#
# Base role block variable definition
#
# General package and service hash list
#
# If a packet has a service associate it should be listed with srv, state and enabled.
# enabled and state defaults to true and started respectively.
dep_pkg_list		:
   - { pkg : "{{ web_service }}" , srv : "{{ web_service }}" , state : "started" , enabled : true }
   - { pkg : "{{ web_proxy }}"   , srv : "{{ web_proxy }}"   , state : "started" , enabled : true }

#
# dir, file, template or link, depending on key values
#
# Will be used in template and file modules to create, delete and link.
#
# This dir_file_tmpl_list dict var will be used in 4 different tasks, one of 
# each type: tmpl, dir, link and file.
#
# If mode not present, it will default to 0644
# Note that one line may be used to multiple goals as defined in types.
# "dir" uses dest only
# "link" uses src and dest: ln -s src dest (force=yes => ln -s -f)
# "tmpl" uses name and dest: name.j2 -> dest/name
# "absent" uses dest to remove files
# srv is used to restart the service, if applicable, after a template is changed.
dir_file_tmpl_list     :
   - { types : [ "dir" , "tmpl" ] , dest : "/etc/nginx/sites-available" , tmpl : "nginx-p8000.j2"   , name : "default"     , srv : "{{ web_service }}" }
   - { types : [ "dir" , "tmpl" ] , dest : "/etc/haproxy"               , tmpl : "haproxy.cfg.j2"   , name : "haproxy.cfg" , srv : "{{ web_proxy }}" }
   - { types : [ "link" ]         , src  : "/etc/nginx/sites-available/default" , dest : "/etc/nginx/sites-enabled/default" }

# Define local and remote files both for upload (copy)
# and download (fetch).
# Action is mandatory (same idea of types in dir_file_tmpl_list above).
# action = list of upload or download or both
# DON'T forget to have local files to upload to the server and local dirs when downloading
# ### specific files for cert backup
up_down_files_list :
   -  { 
         local  : "{{ cert_hash_list[0].local_certkey_path }}",
         remote : "{{ cert_hash_list[0].server_certkey_path }}",
         action : [ "upload" ]
      }
   -  { 
         local  : "{{ cert_hash_list[0].local_cert_path }}" ,
         remote : "{{ cert_hash_list[0].server_cert_path }}",
         action : [ "upload" ]
      }
   -  {
         local  : "{{ cert_hash_list[0].local_pem_file }}" ,
         remote : "{{ cert_hash_list[0].pem_file }}",
         action : [ "upload" ]
      }

#--- End of base role block

###########################################
#
# "users"'s role block
#
# Authorized_keys to fullfill in the server
auth_keys_file_list     :
   - { username : "{{ sys_username }}"      , pub_key_file : "conf.d/testkey" }

#--- End of user stuff role block

###########################################
#
# SSLcrt role block variable definition
#
# SSL certificate and private key
#
# Production directory in Let's Encrypt: "https://acme-v02.api.letsencrypt.org/directory",
# Staging directory in Let's Encrypt: "https://acme-staging-v02.api.letsencrypt.org/directory",
#
# Due to map filter inside the loop, cert_hash_list first element cannot be false like other lists
# So we define another parameter to allow the system to run safely (cert_hash_list[*].enabled)
#
# - turning selfsigned to true won't enter in acme protocol
# - pem_file is for haproxy and others that need CRT+KEY in one file
cert_hash_list		:
   -  {
        enabled			: true ,
        selfsigned		: false ,
        pem_file                : "{{ cert_base_path }}/{{ domain1 }}.pem",
        account_priv_key_path	: "{{ key_base_path }}/{{ account_key }}",
        csr_priv_key_path	: "{{ key_base_path }}/{{ cert_name_prefix }}-csr-key.key",
        csr_cert_path		: "{{ cert_base_path }}/{{ cert_name_prefix }}.csr",
        crt_cert_path		: "{{ cert_base_path }}/{{ cert_name_prefix }}.crt",
        crt_fullchain_path	: "{{ cert_base_path }}/{{ cert_name_prefix }}-fullchain.crt",
        crt_interchain_path	: "{{ cert_base_path }}/{{ cert_name_prefix }}-intermmediate.crt",
        acme_directory		: "https://acme-staging-v02.api.letsencrypt.org/directory",
        C			: "CA",
        ST			: "Quebec",
        L			: "Montreal",
        O			: "Private site",
        OU			: "Private site",
        email_address		: "luizrogeriocarvalho@gmail.com",
        CN			: "{{ domain1 }}",
        force_cert_y_n		: "no",
        allow_creation_y_n	: "yes",
        remaining_days		: "30",
        server_certkey_path	: "{{ key_base_path }}/{{ domain1 }}.key",
        server_cert_path	: "{{ cert_base_path }}/{{ domain1 }}.crt",
        local_certkey_path	: "{{ confdir }}/{{ domain1 }}.key",
        local_cert_path		: "{{ confdir }}/{{ domain1 }}.crt",
        local_pem_file          : "{{ confdir }}/{{ domain1 }}.pem",
        web_rootdir		: "{{ domain1_rootdir }}" ,
      }
# Below other variables that depend on the cert_hash_list above.
# In a near future this list maybe mapped from the cert_hash_list in runtime
# This is just to put in the correct place within the server
server_cert_n_key_list	:
   -  { 
        src  : "{{ cert_hash_list[0].csr_priv_key_path }}",
        dest : "{{ cert_hash_list[0].server_certkey_path }}"
      }
   -  { 
        src  : "{{ cert_hash_list[0].crt_cert_path }}",
        dest : "{{ cert_hash_list[0].server_cert_path }}"
      }
# srv defines if a service will be restarted upon modification in file upload
# In a near future this list maybe mapped from the cert_hash_list in runtime
ssl_up_down_files_list 	:
   -  { 
         local  : "{{ cert_hash_list[0].local_certkey_path }}",
         remote : "{{ cert_hash_list[0].server_certkey_path }}",
         action : [ "upload" , "download" ],
         srv    : "{{ web_proxy }}"
      }
   -  { 
         local  : "{{ cert_hash_list[0].local_cert_path }}" ,
         remote : "{{ cert_hash_list[0].server_cert_path }}",
         action : [ "upload" , "download" ],
         srv    : "{{ web_proxy }}"
      }
   -  {
         local  : "{{ cert_hash_list[0].local_pem_file }}" ,
         remote : "{{ cert_hash_list[0].pem_file }}",
         action : [ "download" ],
         srv    : "{{ web_proxy }}"
      }

#--- End of SSLCrt role block

